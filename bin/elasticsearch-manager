#!/usr/bin/env ruby
require 'optparse'
require 'elasticsearch/manager/cmd'

include Elasticsearch::Manager

def colorize(text, color_code)
  "#{color_code}#{text}e[0m"
end

def green(text); colorize(text, "e[32m"); end
def yellow(text); colorize(text, "e[43m"); end
def red(text); colorize(text, "e[31m"); end

options = {}

opt_parser = OptionParser.new do |opts|
  opts.banner = <<EOC
elasticsearch-manager [options] <command>

Available commands:
  rolling-restart    -- Restart elasticsearch across the entire cluster, one node at a time
  list-nodes         -- List IPs of nodes in the cluster
  shard-state        -- Print current shard states
  status             -- Check the current state of the cluster (green/yellow/red)
  disable-routing    -- Disable shard routing allocation
  enable-routing     -- Enable shard routing allocation

EOC

  options[:hostname] = 'localhost'
  opts.on('-c HOSTNAME', '--cluster-hostname HOSTNAME', 'Hostname used to address the cluster [default: localhost]') do |h|
    options[:hostname] = h
  end

  options[:port] = 9200
  opts.on('-p PORT', '--port PORT', 'Port on which to address the cluster [default: 9200]') do |p|
    options[:port] = p
  end

  options[:timeout] = 600
  opts.on('-t TIMEOUT', '--timeout TIMEOUT', 'Timeout for waiting for cluster to stabilize during rolling-restart [default: 600]') do |t|
    options[:timeout] = t.to_i
  end

  options[:sleep_interval] = 30
  opts.on('-s SLEEP', '--sleep SLEEP', 'Sleep interval between cluster stabilize/node availability checks during rolling-restart [default: 30]') do |s|
    options[:sleep_interval] = s.to_i
  end

  options[:verbose] = false
  opts.on('-v', '--verbose', 'Print verbose messaging') do |v|
    options[:verbose] = v
  end

  options[:assume_yes] = false
  opts.on('-y', '--yes', 'Assume Yes to all queries and do not prompt') do |y|
    options[:assume_yes] = y
  end
end

opt_parser.parse!

cmd = ARGV[0]
case cmd
when 'rolling-restart'
  ec = CMD.rolling_restart(options)
when 'list-nodes'
  ec = CMD.list_nodes(options)
when 'shard-state'
  ec = CMD.shard_states(options)
when 'status'
  ec = CMD.status(options)
when 'disable-routing'
  ec = CMD.disable_routing(options)
when 'enable-routing'
  ec = CMD.enable_routing(options)
else
  puts "Unknown command: #{cmd}\n" 
  puts opt_parser
end

exit(ec)
